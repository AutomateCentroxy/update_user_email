Flow org.gluu.agama.update.email
     Basepath ""
     Timeout 360 seconds
//  Create  variable for UI feedback
uiFeedback = {}
uiFeedback.errorMessage = ""
emailObj = {}
sendMail = true
uiInput = {matches: true, resent: false}
Repeat 6 times max
     //  Retrieve user profile  from UI
     searchUserInput = RRF "searchUser.ftlh" uiFeedback
     //  create an instance of Update service
     emailUpdateService = Call org.gluu.agama.user.EmailUpdate#getInstance 
     // when searchUserForm is submitted
     When searchUserInput.formType is "searchUserForm"
          // assign username to a variable
          userName = searchUserInput.uid
          // get user by username
          userWithUid = Call emailUpdateService getUserEntityByUsername userName
          // when user with provided username not found
          When userWithUid.empty is true
               // show error
               uiFeedback.errorMessage = "User not registered with this UserName"
          Otherwise
               // Display update user page
               userInput = RRF "updateUserEmail.ftlh" userWithUid
               // when fields values are not entered
               When userInput.empty is true
                    // show error
                    uiFeedback.errorMessage = "User input fields are empty"
                    inum = userInput.inum
               Otherwise
                    email = userInput.mail
                    inum = userWithUid.inum
                    otpCode = Call emailUpdateService sendEmail email
                    Log "@info " Send Email Otp method called
                    // When OTP code null
                    When otpCode is null
                         // Variable assignment for unsuccessful Email delivery
                         emailObj = { success: false, error: "Unable_to_deliver_email_message" }
                         // Finish flow unsuccessfully
                         Finish emailObj
                    emailObj.email = email
                    emailObj.accountExists = existingAccount
                    emailObj.matches = uiInput.matches
                    emailObj.resent = uiInput.resent
                    // Redirect to page asking for OTP received using email
                    uiInput = RRF "emailOtp.ftlh" emailObj
                    // resent will false
                    uiInput.resent = false
//  Maximum attempt reached
Log "@info Maximum attempt reached"
//  User Registration flow failed
it_jfbcp = {success:false, error: "User update flow reached max attempts try later"}
Finish it_jfbcp