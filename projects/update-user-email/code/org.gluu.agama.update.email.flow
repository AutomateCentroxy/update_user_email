Flow org.gluu.agama.update.email
     Basepath ""
     Timeout 360 seconds
//  Create  variable for UI feedback
uiFeedback = {}
uiFeedback.errorMessage = ""
emailObj = {}
sendMail = true
uiInput = {matches: true, resent: false}
Repeat 6 times max
     //  Retrieve user profile  from UI
     searchUserInput = RRF "searchUser.ftlh" uiFeedback
     //  create an instance of Update service
     emailUpdateService = Call org.gluu.agama.user.EmailUpdate#getInstance 
     // when searchUserForm is submitted
     When searchUserInput.formType is "searchUserForm"
          // assign username to a variable
          userName = searchUserInput.uid
          // get user by username
          userWithUid = Call emailUpdateService getUserEntityByUsername userName
          // when user with provided username not found
          When userWithUid.empty is true
               // show error
               uiFeedback.errorMessage = "User not registered with this UserName"
          Otherwise
               // Display update user page
               userInput = RRF "updateUserEmail.ftlh" userWithUid
               // when fields values are not entered
               When userInput.empty is true
                    // show error
                    uiFeedback.errorMessage = "User input fields are empty"
                    inum = userInput.inum
               Otherwise
                    email = userInput.mail
                    inum = userWithUid.inum
                    // Iterate x times max
                    max = Repeat 3 times max
                         // When send mail is allowed
                         When sendMail is true
                              // Tun off send mail
                              sendMail = false
                              // Call email service to send mail
                              otpCode = Call emailUpdateService sendEmail email
                              // Send Email Otp method called
                              Log "@info " Send Email Otp method called
                              // When OTP code null
                              When otpCode is null
                                   // Variable assignment for unsuccessful Email delivery
                                   emailObj = { success: false, error: "Unable_to_deliver_email_message" }
                                   // Finish flow unsuccessfully
                                   Finish emailObj
                              // Variable assignment after successful email delivery
                              emailObj.email = email
                              emailObj.accountExists = existingAccount
                              emailObj.matches = uiInput.matches
                              emailObj.resent = uiInput.resent
                              // Redirect to page asking for OTP received using email
                              uiInput = RRF "emailOtp.ftlh" emailObj
                              // resent will false
                              uiInput.resent = false
                              // If user clicked on "resend code" button
                              When uiInput.resent is ""
                                   // Variable assignment when user clicked on "resend code" button
                                   sendMail = true
                                   uiInput.resent = true
                    // Variable assignment when user exceeds the number of attempts allowed
                    obj = { success: false, error: "ExceededTheNumberOfAttemptsAllowed" }
                    // Finish flow when user exceeds maximum number of flows allowed
                    Finish obj
//  Maximum attempt reached
Log "@info Maximum attempt reached"
//  User Registration flow failed
it_beono = {success:false, error: "User update flow reached max attempts try later"}
Finish it_beono